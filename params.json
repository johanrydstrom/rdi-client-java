{"name":"Rdi-client-java","tagline":"Hoppy has to make the lumber deal happen and solve the murder.","body":"## Overview\r\n\r\nThe RdiClient for Java is a client library for posting event streams to Metamarkets' real-time data ingestion (RDI) API, which receives and processes event data in real-time.  The client comes with functionality to handle connecting to the HTTPS endpoint, authentication, serialization & batching events, HTTP transport, and error handling (w/ exponential-backoff retries).\r\n\r\n## Usage\r\n\r\n### Getting Started\r\n\r\nTo create the client, you'll need to pass a config and a serializer.  The following is an example of creating the client and using the basic API for passing event records:\r\n\r\n```java\r\nfinal String feed = \"<PROVIDED_BY_MMX>\";\r\nfinal String endpoint = String.format(\"https://rt-test.mmx.io/events/%s\", feed);\r\nfinal String username = \"<PROVIDED_BY_MMX>\";\r\nfinal String password = \"PROVIDED_BY_MMX>\";\r\n\r\nfinal RdiClientConfig config = RdiClientConfig.builder()\r\n                                              .username(username)\r\n                                              .password(password)\r\n                                              .mmxBaseUrl(endpoint)\r\n                                              .build();\r\n\r\nfinal RdiClient<MmxAuctionSummary> client = RdiClients.usingJacksonSerializer(config);\r\n\r\nclient.start();\r\n\r\nfor (message : messages) {\r\n  client.send(message);\r\n}\r\n\r\nclient.flush();\r\nclient.close();\r\n```\r\n\r\n### Data Format & Serialization\r\n\r\nMetamarkets API currently accepts JSON event data with UTF-8 encoding.  We have a jackson-based serialization library available ([link here](https://github.com/metamx/rad-tech-datatypes)) for generating the OpenRTB-based event records which may be used in conjunction with the RDI Client. \r\n\r\nFor more information on the required data types, please contact your Metamarkets representative.  \r\n\r\nThe client requires a \"serializer\" class to be passed for converting messages to byte arrays prior to posting.  There are two built in serializers available:\r\n\r\n- JacksonSerializer: Uses a Jackson ObjectMapper to serialize events to byte arrays.  This library comes with default methods for creating a client for posting [Metamarkets' standard data types](https://github.com/metamx/rad-tech-datatypes).  \r\n```java\r\n// For MmxAuctionSummary events:\r\nfinal RdiClient<MmxAuctionSummary> client = RdiClients.usingJacksonSerializer(config);\r\n```\r\n\r\n- PassthroughSerializer: Use for passing pre-serialized events as a byte array.  This option may be used in cases where serialization is handled upstream.\r\n```java\r\nfinal RdiClient<byte[]> client = RdiClients.makeDefault(config, new PassthroughSerializer());\r\n```\r\n\r\n### Compression\r\n\r\nThe Metamarkets API currently only supports gzip compression.  You may enable compression by setting the \"contentEncoding\" configuration parameter to \".contentEncoding(RdiClientConfig.ContentEncoding.GZIP)\".  Otherwise it will default to \"NONE\".  \r\n\r\nBecause events will be compressed by the library, you should not compress them prior to calling the client.\r\n\r\n### Scaling\r\n\r\nEach RdiClient instance maintains one connection to the server.  If you need multiple connections to improve throughput, you should use multiple instances of the client simultaneously.\r\n\r\nPlease note that RdiClient is not thread-safe, so if one instance is used for multiple threads, access must be synchronized.\r\n\r\n### Posting Data & Handling Responses\r\n\r\nData should be delivered in a smooth and continuous pattern.  When a new batch of data is posted, the Metamarkets API should respond with an HTTP 2xx response code within 50-100ms unless an error is encountered.  Typical causes for errors when posting event data to the API endpoint include connectivity/network issues, or bad HTTP responses from the server due to issues such as exceeding your rate limit (HTTP 420), incorrect credentials (HTTP 401), or server issues (HTTP 500s).  Attempting to deliver data in large batches (e.g. once every few minutes or hour) is likely to cuase the volume rate to exceed your quota and result in a failed upload.\r\n\r\nThe client uses an exponential backoff retry strategy for all types of POST failures.  The maximum number of retries is set in your RdiClientConfig, where the default is 20 (which could lead to retries lasting up to 15 minutes).  \r\n\r\nIn the event that the client is unable to POST your data despite exhausting all retries, an RdiException will be thrown and will kill the process if left unhandled.  If the RdiException is caused by an unsuccessful attempt to POST data to the Metamarkets endpoint, the exception will be an instance of an RdiPostFailedException, from which the response code can be obtained via the \"getStatusCode\" method.  You should parse the exceptions to build out your own custom error handling.\r\n\r\n### Delivering Data \"On Time\"\r\n\r\nMetamarkets RDI expects data be uploaded in real-time.  Although \"late\" data will still be accepted by the API, it may not be processed in real-time.  \"Current data\" is defined as data with events that have a timestamp no more than 10 minutes behind the time the data is posted to RDI.Data with a timestamp more than 10 minutes older than current time is saved and surfaced in your dashboard usually within 48 hours. \r\n\r\nIf your data uploads fall behind, do not attempt to backfill all of the data by uploading it at once. That will likely exceed your volume quota and result in a failed upload (HTTP 420 error code). Instead, increase the overall throughput rate at which data is posted to a level between the normal rate and the quota (but no more than twice the normal rate), until data timestamps are near current time. If an HTTP 420 error code is returned, reduce the rate.\r\n\r\n### Where to Implement the RdiClient\r\n\r\nWe strongly recommend that customers run the client safely out of band of mission-critical systems (e.g. servers conducting auctions or bidding).  The client *will block* when you call \"flush\" (and periodically upon calling \"send\") until events are successfully posted.  It is best practice to use a message queue (e.g. Kafka or RabbitMQ) for buffering data prior to delivery to the Metamarkets API.  Log retention should be set to a window long enough to allow for retention of data in the event of issues posting data to RDI.  We typically recommend that customers keep the data for 5-7 days.\r\n\r\n### Kafka Example\r\n\r\nAlthough the RDI client does not require a particular upstream message queue, we have provided an example implementation for Kafka in the \"kafka-example\" module.  Commits are done manually in order to support a \"guaranteed delivery\" approach.  \r\n\r\n*** Recommend that people download the jar from the java docs -> one for core and one for the kafka example.\r\n\r\n### JARs\r\n\r\nRdiClient artifacts are hosted on the Metamarkets maven repository: https://metamx.artifactoryonline.com/metamx/pub-libs-releases-local/.\r\nIf you set up your project to know about this repository, you can depend on one of the hosted versions.\r\n\r\nThe current stable version is:\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>com.metamx</groupId>\r\n  <artifactId>update!!</artifactId>\r\n  <version>update!!</version>\r\n</dependency>\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}